@page "/myresults"

@using LabModels
@using LabMobile.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using PdfSharpCore.Drawing
@using PdfSharpCore.Pdf
@using System.IO

<h3>MyAnalisis</h3>

@if (analysisResults != null)
{
    <ul>
        @foreach (var result in analysisResults)
        {
            <li>
                <strong>Patient Name:</strong> @result.PatientName <br />
                <strong>Laboratory Assistant Name:</strong> @result.LaboratoryAssistantName <br />
                <strong>Nurse Name:</strong> @result.NurseName <br />
                <strong>Registrar Name:</strong> @result.RegistrarName <br />
                <strong>Analysis Name:</strong> @result.AnalysisName <br />
                <strong>Analysis Reception Point Name:</strong> @result.AnalysisReceptionPointName <br />
                <strong>Time:</strong> @result.Time <br />
                <strong>Analysis Values:</strong> @result.AnalysisValues <br />

                <button @onclick="async () => await GetAdvice(result)">AI Assistance</button>
                <button @onclick="async () => await ExportToPdf(result)">Export to PDF</button>

                @if (adviceDictionary.ContainsKey(result))
                {
                    <p><strong>AI Advice:</strong> @adviceDictionary[result]</p>
                }
            </li>
        }
    </ul>
}
else
{
    <p>No analysis results found.</p>
}


@code {
    [Inject]
    private IAnalysisResultService AnalysisResultService { get; set; }

    [Inject]
    private IChatGptService ChatGptService { get; set; }

    private List<AnalysisResultResult> analysisResults;
    private Dictionary<AnalysisResultResult, string> adviceDictionary;

    protected override async Task OnInitializedAsync()
    {
        analysisResults = await AnalysisResultService.GetAnalysisResultResultAsync();
        adviceDictionary = new Dictionary<AnalysisResultResult, string>();
    }

    private async Task GetAdvice(AnalysisResultResult analysisResult)
    {
        if (!adviceDictionary.ContainsKey(analysisResult))
        {
            var advice = await ChatGptService.GetAdviceAsync(analysisResult);
            adviceDictionary.Add(analysisResult, advice);
        }
    }

    private async Task ExportToPdf(AnalysisResultResult analysisResult)
    {
        var pdf = new PdfDocument();
        var page = pdf.AddPage();
        var graphics = XGraphics.FromPdfPage(page);

        XFont titleFont = new XFont("Arial", 18, XFontStyle.Bold);
        XFont regularFont = new XFont("Arial", 12, XFontStyle.Regular);
        XBrush brush = XBrushes.Black;

        int y = 30;
        graphics.DrawString("Analysis Result", titleFont, brush, new XPoint(30, y));
        y += 30;

        graphics.DrawString("Patient Name:", regularFont, brush, new XPoint(30, y));
        graphics.DrawString(analysisResult.PatientName ?? "", regularFont, brush, new XPoint(150, y));
        y += 20;

        graphics.DrawString("Laboratory Assistant Name:", regularFont, brush, new XPoint(30, y));
        graphics.DrawString(analysisResult.LaboratoryAssistantName ?? "", regularFont, brush, new XPoint(250, y));
        y += 20;

        // Add other fields with null checks

        // Save the PDF to a memory stream
        using (var memoryStream = new MemoryStream())
        {
            pdf.Save(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);

            // Open the PDF in a new window/tab
            var pdfData = memoryStream.ToArray();
            var pdfBase64 = Convert.ToBase64String(pdfData);
            var pdfUrl = $"data:application/pdf;base64,{pdfBase64}";

            await JSRuntime.InvokeVoidAsync("open", pdfUrl, "_blank");
        }
    }

}
