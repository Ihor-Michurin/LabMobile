@page "/airqualitymeasurements/update/{id}"

@using LabModels
@using LabMobile.Services
@inject IAirQualityMeasurementService measurementService
@inject NavigationManager NavigationManager;

<h3>Update Air Quality Measurement</h3>

@if (measurement == null)
{
    <p>Loading...</p>
}
else
{
    <form>
        <div class="form-group">
            <label for="receptionPointId">Reception Point ID:</label>
            <input type="text" class="form-control" id="receptionPointId" name="receptionPointId" @bind="measurement.ReceptionPointId" />
        </div>
        <div class="form-group">
            <label for="date">Date:</label>
            <input type="datetime-local" class="form-control" id="date" name="date" @bind="measurement.Date" />
        </div>
        <div class="form-group">
            <label for="temperature">Temperature:</label>
            <input type="number" step="0.01" class="form-control" id="temperature" name="temperature" @bind="measurement.Temperature" />
        </div>
        <div class="form-group">
            <label for="pressure">Pressure:</label>
            <input type="number" step="0.01" class="form-control" id="pressure" name="pressure" @bind="measurement.Pressure" />
        </div>
        <div class="form-group">
            <label for="humidity">Humidity:</label>
            <input type="number" step="0.01" class="form-control" id="humidity" name="humidity" @bind="measurement.Humidity" />
        </div>
        <div class="form-group">
            <label for="gas">Gas:</label>
            <input type="number" step="0.01" class="form-control" id="gas" name="gas" @bind="measurement.Co2Equivalent" />
        </div>
        <div class="form-group">
            <label for="iaq">IAQ:</label>
            <input type="number" step="0.01" class="form-control" id="iaq" name="iaq" @bind="measurement.Iaq" />
        </div>
        <div class="form-group">
            <label for="iaqLevel">IAQ Level:</label>
            <input type="text" class="form-control" id="iaqLevel" name="iaqLevel" @bind="measurement.IaqLevel" />
        </div>
        <div class="form-group">
            <label for="season">Season:</label>
            <input type="text" class="form-control" id="season" name="season" @bind="measurement.Season" />
        </div>
        <div class="form-group">
            <label for="isNormal">Is Normal:</label>
            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="isNormal" @bind="measurement.IsNormal" />
                <label class="custom-control-label" for="isNormal"></label>
            </div>
        </div>
        <button type="button" class="btn btn-primary" @onclick="UpdateMeasurement">Update</button>
    </form>
}

@code {
    private AirQualityMeasurement measurement;
    private Guid measurementId;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(this.Id, out Guid id))
        {
            measurement = await measurementService.GetAirQualityMeasurementAsync(id);
        }
    }

    [Parameter]
    public string Id
    {
        get { return measurementId.ToString(); }
        set { measurementId = Guid.Parse(value); }
    }

    private async Task UpdateMeasurement()
    {
        if (measurement.Id == Guid.Empty)
        {
            // show error message if the Id is empty
            return;
        }

        var success = await measurementService.UpdateAirQualityMeasurementAsync(new AirQualityMeasurement
            {
                Id = Guid.Parse(Id), // convert the string Id to a Guid
                ReceptionPointId = measurement.ReceptionPointId,
                Date = measurement.Date,
                Temperature = measurement.Temperature,
                Pressure = measurement.Pressure,
                Humidity = measurement.Humidity,
                Co2Equivalent = measurement.Co2Equivalent,
                Iaq = measurement.Iaq,
                IaqLevel = measurement.IaqLevel,
                Season = measurement.Season,
                IsNormal = measurement.IsNormal
            });

        if (success)
        {
            NavigationManager.NavigateTo("/AirQualityMeasurements/AirQualityMeasurements");
        }
        else
        {
            // show error message if update failed
        }
    }
}
