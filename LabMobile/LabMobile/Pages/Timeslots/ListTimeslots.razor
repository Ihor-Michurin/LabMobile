@page "/timeslotselection"

@using LabModels
@using LabMobile.Services
@using LiqPay
@using LiqPay.SDK.Dto;
@using LiqPay.SDK;
@using LiqPay.SDK.Dto.Enums;


@inject NavigationManager NavigationManager

<h3>ClientAnalisReception</h3>


@if (IsConfirmationDialogVisible)
{
    <div class="confirmation-dialog">
        <p>Are you sure you want to book this timeslot?</p>
        <button @onclick="BookTimeslot">Yes</button>
        <button @onclick="CancelBooking">No</button>
    </div>
}

@if (Timeslots == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var timeslot in Timeslots)
        {
            <li>
                <p>@TimeZoneInfo.ConvertTimeFromUtc(timeslot.Time, TimeZoneInfo.Local).ToString("yyyy-MM-dd HH:mm")</p>
                <button @onclick="() => ShowConfirmationDialog(timeslot.Id)">Select</button>
            </li>
        }
    </ul>
}

@code {
    private List<Timeslot> Timeslots;
    private bool IsConfirmationDialogVisible;
    private Guid SelectedTimeslotId;

    [Inject]
    private ITimeslotService TimeslotService { get; set; }

    [Inject]
    private IAnalysisService AnalysisService { get; set; }

    [Inject]
    private IAnalysisReceptionPointService AnalysisReceptionPointService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var analysisReceptionPointId = await SecureStorage.GetAsync("receptionPointId");

        Timeslots = await TimeslotService.GetTimeslotsAsync(Guid.Parse(analysisReceptionPointId));
    }

    private void ShowConfirmationDialog(Guid timeslotId)
    {
        SelectedTimeslotId = timeslotId;
        IsConfirmationDialogVisible = true;
        StateHasChanged(); // Force re-rendering

    }

    private async Task BookTimeslot()
    {
        var selectedTimeslot = Timeslots.FirstOrDefault(t => t.Id == SelectedTimeslotId);
        if (selectedTimeslot != null && selectedTimeslot.Avaliable)
        {
            var analisisId = await SecureStorage.GetAsync("analysisId");
            var analysisReceptionPointId = await SecureStorage.GetAsync("receptionPointId");

            var analisis = await AnalysisService.GetAnalysisAsync(Guid.Parse(analisisId));
            var arp = await AnalysisReceptionPointService.GetAnalysisReceptionPointAsync(Guid.Parse(analysisReceptionPointId));

            // Create a LiqPay payment request
            var liqPayRequest = new LiqPayRequest
                {
                    Amount = Convert.ToDouble(analisis.Price), // Set the payment amount
                    Currency = "UAH", // Set the payment currency
                    Description = "Timeslot Booking. Time: " + selectedTimeslot.Time + " . Analisis: " + analisis.Name + " . Analisis reception point: " + arp.Name + " , " + arp.Address, // Set the payment description
                    OrderId = Guid.NewGuid().ToString(), // Generate a unique order ID

                    Email = "email@example.com",
                    Action = LiqPayRequestAction.InvoiceSend,
                    Language = LiqPayRequestLanguage.EN,
                    Goods = new List<LiqPayRequestGoods> {
        new LiqPayRequestGoods {
            Amount = Convert.ToDouble(analisis.Price),
            Count = 1,
            Unit = "pcs.",
            Name = analisis.Name,
        }
    }
                };

            var liqPayClient = new LiqPayClient("sandbox_i58062972179", "sandbox_sy2Cq9G7ECd0raFrFlv1JURfNzykTVhMR7hsegmM");
            var response = await liqPayClient.RequestAsync("request", liqPayRequest);

            NavigationManager.NavigateTo(response.Href, forceLoad: true);

            await TimeslotService.BookTimeslotAsync(selectedTimeslot.Time);
            IsConfirmationDialogVisible = false;
            NavigationManager.NavigateTo("/");
        }
    }

    private void CancelBooking()
    {
        IsConfirmationDialogVisible = false;
    }
}